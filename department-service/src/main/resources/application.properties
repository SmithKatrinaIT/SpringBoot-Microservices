#spring.datasource.url=jdbc:mysql://localhost:3306/department_db
#spring.datasource.username=root
#spring.datasource.password=Root@098
#
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=update
#
##SERVICE ID for uses the Eureka Registry
#spring.application.name=DEPARTMENT-SERVICE
#
## Eureka Server URL
## Eureka server (aka Discovery Server) microservices register into the server; server holds the all applications port & IP address
## ONE App ID (spring.application.name property) is associated with the application to handle multiple running instances and/or
## load balancing config
## NOTE: Eureka Registry Server (service) must be running to test/use the applications and/or API Gateway registered to it
#eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

################################# Spring Cloud Config Server implementation #########################################
# above properties an be omitted if using a centralized location for the microservice configuration files
# only required properties are: [micro]service ID and the Config Service Uri [location]

##SERVICE ID for uses the Eureka Registry
spring.application.name=DEPARTMENT-SERVICE
#Spring Cloud Config Server [application] Uri [location]
spring.config.import=optional:configserver:http://localhost:8888


################################ Spring Boot Actuator Property for Manually triggering Auto-Refresh of Microservices #######################
# the MessageController contains custom message property to display a message once an Actuator 'actuator/refresh' Endpoint is invoked
# When the Config-Server [centralized location for registered microservices configuration files] is restarted; the 'actuator/refresh endpoint
# can be invoked which will then leverage MessageController with the @RefreshScope configuration [annotation] to force 'this' service
#to reload its config file and take the necessary action(s)
management.endpoints.web.exposure.include=*